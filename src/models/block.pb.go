// Code generated by protoc-gen-go. DO NOT EDIT.
// source: block.proto

package models

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Block struct {
	// Base
	Signature                 string   `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature"`
	ItemId                    string   `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id"`
	NextLeader                string   `protobuf:"bytes,3,opt,name=next_leader,json=nextLeader,proto3" json:"next_leader"`
	TransactionCount          int64    `protobuf:"varint,4,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count"`
	Type                      string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type"`
	Version                   string   `protobuf:"bytes,6,opt,name=version,proto3" json:"version"`
	PeerId                    string   `protobuf:"bytes,7,opt,name=peer_id,json=peerId,proto3" json:"peer_id"`
	Number                    int64    `protobuf:"varint,8,opt,name=number,proto3" json:"number"`
	MerkleRootHash            string   `protobuf:"bytes,9,opt,name=merkle_root_hash,json=merkleRootHash,proto3" json:"merkle_root_hash"`
	ItemTimestamp             string   `protobuf:"bytes,10,opt,name=item_timestamp,json=itemTimestamp,proto3" json:"item_timestamp"`
	Hash                      string   `protobuf:"bytes,11,opt,name=hash,proto3" json:"hash"`
	ParentHash                string   `protobuf:"bytes,12,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash"`
	Timestamp                 int64    `protobuf:"varint,13,opt,name=timestamp,proto3" json:"timestamp"`
	TransactionFees           string   `protobuf:"bytes,14,opt,name=transaction_fees,json=transactionFees,proto3" json:"transaction_fees"`
	TransactionAmount         string   `protobuf:"bytes,15,opt,name=transaction_amount,json=transactionAmount,proto3" json:"transaction_amount"`
	InternalTransactionAmount string   `protobuf:"bytes,16,opt,name=internal_transaction_amount,json=internalTransactionAmount,proto3" json:"internal_transaction_amount"`
	InternalTransactionCount  int64    `protobuf:"varint,17,opt,name=internal_transaction_count,json=internalTransactionCount,proto3" json:"internal_transaction_count"`
	FailedTransactionCount    int64    `protobuf:"varint,18,opt,name=failed_transaction_count,json=failedTransactionCount,proto3" json:"failed_transaction_count"`
	BlockTime                 int64    `protobuf:"varint,19,opt,name=block_time,json=blockTime,proto3" json:"block_time"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{0}
}

func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *Block) GetItemId() string {
	if m != nil {
		return m.ItemId
	}
	return ""
}

func (m *Block) GetNextLeader() string {
	if m != nil {
		return m.NextLeader
	}
	return ""
}

func (m *Block) GetTransactionCount() int64 {
	if m != nil {
		return m.TransactionCount
	}
	return 0
}

func (m *Block) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Block) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Block) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *Block) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Block) GetMerkleRootHash() string {
	if m != nil {
		return m.MerkleRootHash
	}
	return ""
}

func (m *Block) GetItemTimestamp() string {
	if m != nil {
		return m.ItemTimestamp
	}
	return ""
}

func (m *Block) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Block) GetParentHash() string {
	if m != nil {
		return m.ParentHash
	}
	return ""
}

func (m *Block) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Block) GetTransactionFees() string {
	if m != nil {
		return m.TransactionFees
	}
	return ""
}

func (m *Block) GetTransactionAmount() string {
	if m != nil {
		return m.TransactionAmount
	}
	return ""
}

func (m *Block) GetInternalTransactionAmount() string {
	if m != nil {
		return m.InternalTransactionAmount
	}
	return ""
}

func (m *Block) GetInternalTransactionCount() int64 {
	if m != nil {
		return m.InternalTransactionCount
	}
	return 0
}

func (m *Block) GetFailedTransactionCount() int64 {
	if m != nil {
		return m.FailedTransactionCount
	}
	return 0
}

func (m *Block) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func init() {
	proto.RegisterType((*Block)(nil), "models.Block")
}

func init() {
	proto.RegisterFile("block.proto", fileDescriptor_8e550b1f5926e92d)
}

var fileDescriptor_8e550b1f5926e92d = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4f, 0xcb, 0xd3, 0x40,
	0x10, 0xc6, 0xa9, 0xef, 0xdb, 0xb4, 0x99, 0xda, 0x7f, 0x23, 0xd4, 0x55, 0x2b, 0x16, 0x41, 0xa8,
	0x88, 0xf5, 0xe0, 0xc5, 0x83, 0x08, 0x56, 0x10, 0x0b, 0x9e, 0x4a, 0x4f, 0x5e, 0xc2, 0xb6, 0x99,
	0xda, 0xa5, 0xc9, 0x6e, 0xd8, 0xdd, 0x8a, 0x7e, 0x3b, 0x3f, 0xda, 0xcb, 0xce, 0xb6, 0x34, 0xd0,
	0xdc, 0x32, 0xbf, 0x99, 0x67, 0x32, 0xfb, 0xcc, 0x40, 0x6f, 0x5b, 0x98, 0xdd, 0x71, 0x51, 0x59,
	0xe3, 0x0d, 0x26, 0xa5, 0xc9, 0xa9, 0x70, 0xaf, 0xff, 0xb7, 0xa1, 0xbd, 0x0c, 0x1c, 0xa7, 0x90,
	0x3a, 0xf5, 0x5b, 0x4b, 0x7f, 0xb2, 0x24, 0x5a, 0xb3, 0xd6, 0x3c, 0x5d, 0x5f, 0x01, 0x3e, 0x85,
	0x8e, 0xf2, 0x54, 0x66, 0x2a, 0x17, 0x8f, 0x38, 0x97, 0x84, 0x70, 0x95, 0xe3, 0x2b, 0xe8, 0x69,
	0xfa, 0xeb, 0xb3, 0x82, 0x64, 0x4e, 0x56, 0xdc, 0x71, 0x12, 0x02, 0xfa, 0xc9, 0x04, 0xdf, 0xc1,
	0xd8, 0x5b, 0xa9, 0x9d, 0xdc, 0x79, 0x65, 0x74, 0xb6, 0x33, 0x27, 0xed, 0xc5, 0xfd, 0xac, 0x35,
	0xbf, 0x5b, 0x8f, 0x6a, 0x89, 0x6f, 0x81, 0x23, 0xc2, 0xbd, 0xff, 0x57, 0x91, 0x68, 0x73, 0x1b,
	0xfe, 0x46, 0x01, 0x9d, 0x3f, 0x64, 0x9d, 0x32, 0x5a, 0x24, 0x8c, 0x2f, 0x61, 0x18, 0xaa, 0x22,
	0xb2, 0x61, 0xa8, 0x4e, 0x1c, 0x2a, 0x84, 0xab, 0x1c, 0x27, 0x90, 0xe8, 0x53, 0xb9, 0x25, 0x2b,
	0xba, 0xfc, 0xa3, 0x73, 0x84, 0x73, 0x18, 0x95, 0x64, 0x8f, 0x05, 0x65, 0xd6, 0x18, 0x9f, 0x1d,
	0xa4, 0x3b, 0x88, 0x94, 0x95, 0x83, 0xc8, 0xd7, 0xc6, 0xf8, 0x1f, 0xd2, 0x1d, 0xf0, 0x0d, 0x0c,
	0xf8, 0xbd, 0x5e, 0x95, 0xe4, 0xbc, 0x2c, 0x2b, 0x01, 0x5c, 0xd7, 0x0f, 0x74, 0x73, 0x81, 0x61,
	0x5e, 0x6e, 0xd2, 0x8b, 0xf3, 0x86, 0xef, 0xe0, 0x48, 0x25, 0x2d, 0xe9, 0x73, 0xff, 0xc7, 0xd1,
	0x91, 0x88, 0xb8, 0xf7, 0x14, 0xd2, 0x6b, 0xdb, 0x3e, 0x0f, 0x78, 0x05, 0xf8, 0x16, 0xea, 0xb6,
	0x64, 0x7b, 0x22, 0x27, 0x06, 0xdc, 0x63, 0x58, 0xe3, 0xdf, 0x89, 0x1c, 0xbe, 0x07, 0xac, 0x97,
	0xca, 0x92, 0xbd, 0x1d, 0x72, 0x71, 0xdd, 0xf4, 0xaf, 0x9c, 0xc0, 0x2f, 0xf0, 0x42, 0x69, 0x4f,
	0x56, 0xcb, 0x22, 0x6b, 0xd0, 0x8d, 0x58, 0xf7, 0xec, 0x52, 0xb2, 0xb9, 0xd1, 0x7f, 0x86, 0xe7,
	0x8d, 0xfa, 0xb8, 0xd2, 0x31, 0x3f, 0x44, 0x34, 0xc8, 0xe3, 0x6a, 0x3f, 0x81, 0xd8, 0x4b, 0x55,
	0x50, 0xde, 0xa0, 0x45, 0xd6, 0x4e, 0x62, 0xfe, 0x46, 0xf9, 0x12, 0x80, 0x4f, 0x97, 0x97, 0x21,
	0x9e, 0x44, 0xc3, 0x98, 0x84, 0x45, 0x2c, 0xe1, 0x57, 0x77, 0xf1, 0x21, 0x9e, 0xf3, 0x36, 0xe1,
	0xeb, 0xfe, 0xf8, 0x10, 0x00, 0x00, 0xff, 0xff, 0x42, 0x1d, 0x8e, 0xe9, 0xec, 0x02, 0x00, 0x00,
}
